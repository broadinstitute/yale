// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	resourcemap "github.com/broadinstitute/yale/internal/yale/resourcemap"
	mock "github.com/stretchr/testify/mock"
)

// Mapper is an autogenerated mock type for the Mapper type
type Mapper struct {
	mock.Mock
}

type Mapper_Expecter struct {
	mock *mock.Mock
}

func (_m *Mapper) EXPECT() *Mapper_Expecter {
	return &Mapper_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields:
func (_m *Mapper) Build() (map[string]*resourcemap.Bundle, error) {
	ret := _m.Called()

	var r0 map[string]*resourcemap.Bundle
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]*resourcemap.Bundle, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]*resourcemap.Bundle); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*resourcemap.Bundle)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mapper_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type Mapper_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *Mapper_Expecter) Build() *Mapper_Build_Call {
	return &Mapper_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *Mapper_Build_Call) Run(run func()) *Mapper_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mapper_Build_Call) Return(_a0 map[string]*resourcemap.Bundle, _a1 error) *Mapper_Build_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mapper_Build_Call) RunAndReturn(run func() (map[string]*resourcemap.Bundle, error)) *Mapper_Build_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMapper interface {
	mock.TestingT
	Cleanup(func())
}

// NewMapper creates a new instance of Mapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMapper(t mockConstructorTestingTNewMapper) *Mapper {
	mock := &Mapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
