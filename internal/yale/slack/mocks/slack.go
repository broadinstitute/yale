// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	cache "github.com/broadinstitute/yale/internal/yale/cache"
	mock "github.com/stretchr/testify/mock"
)

// SlackNotifier is an autogenerated mock type for the SlackNotifier type
type SlackNotifier struct {
	mock.Mock
}

type SlackNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *SlackNotifier) EXPECT() *SlackNotifier_Expecter {
	return &SlackNotifier_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with given fields: entry, message
func (_m *SlackNotifier) Error(entry *cache.Entry, message string) error {
	ret := _m.Called(entry, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cache.Entry, string) error); ok {
		r0 = rf(entry, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SlackNotifier_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type SlackNotifier_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - entry *cache.Entry
//   - message string
func (_e *SlackNotifier_Expecter) Error(entry interface{}, message interface{}) *SlackNotifier_Error_Call {
	return &SlackNotifier_Error_Call{Call: _e.mock.On("Error", entry, message)}
}

func (_c *SlackNotifier_Error_Call) Run(run func(entry *cache.Entry, message string)) *SlackNotifier_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cache.Entry), args[1].(string))
	})
	return _c
}

func (_c *SlackNotifier_Error_Call) Return(_a0 error) *SlackNotifier_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SlackNotifier_Error_Call) RunAndReturn(run func(*cache.Entry, string) error) *SlackNotifier_Error_Call {
	_c.Call.Return(run)
	return _c
}

// KeyDeleted provides a mock function with given fields: entry, id
func (_m *SlackNotifier) KeyDeleted(entry *cache.Entry, id string) error {
	ret := _m.Called(entry, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cache.Entry, string) error); ok {
		r0 = rf(entry, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SlackNotifier_KeyDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyDeleted'
type SlackNotifier_KeyDeleted_Call struct {
	*mock.Call
}

// KeyDeleted is a helper method to define mock.On call
//   - entry *cache.Entry
//   - id string
func (_e *SlackNotifier_Expecter) KeyDeleted(entry interface{}, id interface{}) *SlackNotifier_KeyDeleted_Call {
	return &SlackNotifier_KeyDeleted_Call{Call: _e.mock.On("KeyDeleted", entry, id)}
}

func (_c *SlackNotifier_KeyDeleted_Call) Run(run func(entry *cache.Entry, id string)) *SlackNotifier_KeyDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cache.Entry), args[1].(string))
	})
	return _c
}

func (_c *SlackNotifier_KeyDeleted_Call) Return(_a0 error) *SlackNotifier_KeyDeleted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SlackNotifier_KeyDeleted_Call) RunAndReturn(run func(*cache.Entry, string) error) *SlackNotifier_KeyDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// KeyDisabled provides a mock function with given fields: entry, id
func (_m *SlackNotifier) KeyDisabled(entry *cache.Entry, id string) error {
	ret := _m.Called(entry, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cache.Entry, string) error); ok {
		r0 = rf(entry, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SlackNotifier_KeyDisabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyDisabled'
type SlackNotifier_KeyDisabled_Call struct {
	*mock.Call
}

// KeyDisabled is a helper method to define mock.On call
//   - entry *cache.Entry
//   - id string
func (_e *SlackNotifier_Expecter) KeyDisabled(entry interface{}, id interface{}) *SlackNotifier_KeyDisabled_Call {
	return &SlackNotifier_KeyDisabled_Call{Call: _e.mock.On("KeyDisabled", entry, id)}
}

func (_c *SlackNotifier_KeyDisabled_Call) Run(run func(entry *cache.Entry, id string)) *SlackNotifier_KeyDisabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cache.Entry), args[1].(string))
	})
	return _c
}

func (_c *SlackNotifier_KeyDisabled_Call) Return(_a0 error) *SlackNotifier_KeyDisabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SlackNotifier_KeyDisabled_Call) RunAndReturn(run func(*cache.Entry, string) error) *SlackNotifier_KeyDisabled_Call {
	_c.Call.Return(run)
	return _c
}

// KeyIssued provides a mock function with given fields: entry, id
func (_m *SlackNotifier) KeyIssued(entry *cache.Entry, id string) error {
	ret := _m.Called(entry, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cache.Entry, string) error); ok {
		r0 = rf(entry, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SlackNotifier_KeyIssued_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KeyIssued'
type SlackNotifier_KeyIssued_Call struct {
	*mock.Call
}

// KeyIssued is a helper method to define mock.On call
//   - entry *cache.Entry
//   - id string
func (_e *SlackNotifier_Expecter) KeyIssued(entry interface{}, id interface{}) *SlackNotifier_KeyIssued_Call {
	return &SlackNotifier_KeyIssued_Call{Call: _e.mock.On("KeyIssued", entry, id)}
}

func (_c *SlackNotifier_KeyIssued_Call) Run(run func(entry *cache.Entry, id string)) *SlackNotifier_KeyIssued_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cache.Entry), args[1].(string))
	})
	return _c
}

func (_c *SlackNotifier_KeyIssued_Call) Return(_a0 error) *SlackNotifier_KeyIssued_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SlackNotifier_KeyIssued_Call) RunAndReturn(run func(*cache.Entry, string) error) *SlackNotifier_KeyIssued_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewSlackNotifier interface {
	mock.TestingT
	Cleanup(func())
}

// NewSlackNotifier creates a new instance of SlackNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSlackNotifier(t mockConstructorTestingTNewSlackNotifier) *SlackNotifier {
	mock := &SlackNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
