package client

// Taken from disk manager
// https://github.com/broadinstitute/disk-manager/
import (
	"fmt"
	v1crd "github.com/broadinstitute/yale/internal/yale/v1"
	"golang.org/x/net/context"
	"google.golang.org/api/iam/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/runtime/serializer"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/kubernetes/scheme"
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"
	restclient "k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"
)

// Build will return a k8s client using local kubectl
// config

// Clients struct containing the GCP and k8s clients used in this tool
type Clients struct {
	gcp *iam.Service
	k8s *kubernetes.Clientset
	crd *restclient.RESTClient
}

// GetGCP will return a handle to the gcp client generated by the builder
func (c *Clients) GetGCP() *iam.Service {
	return c.gcp
}

// GetK8s will return  a handle to the kubernetes client generated by the builder
func (c *Clients) GetK8s() *kubernetes.Clientset {
	return c.k8s
}

// GetCRDs will return  a handle to the crd client generated by the builder
func (c *Clients) GetCRDs() *restclient.RESTClient{
	return c.crd
}

// Build creates the GCP and k8s clients used by this tool
// and returns both packaged in a single struct
func Build(local bool, kubeconfig string) (*Clients, error) {
	conf, err := buildKubeConfig(local, kubeconfig)
	if err != nil {
		return nil, fmt.Errorf("Error building kube client: %v", err)
	}
	k8s, err := buildKubeClient(conf)
	if err != nil {
		return nil, fmt.Errorf("Error building kube client: %v", err)
	}

	gcp, err := buildGCPClient()
	if err != nil {
		return nil, fmt.Errorf("Error building GCP client: %v", err)
	}
	crd, err := buildCrdClient(conf)
	if err != nil {
		return nil, fmt.Errorf("Error building GCP client: %v", err)
	}
	return &Clients{
		gcp,
		k8s,
		crd,
	}, nil
}

func buildKubeConfig(local bool, kubeconfig string) (*restclient.Config, error) {
	if local {
		config, err := clientcmd.BuildConfigFromFlags("", kubeconfig)
		if err != nil {
			return nil, fmt.Errorf("Error building local k8s config: %v", err)
		}
		return config, nil
	}
	config, err := restclient.InClusterConfig()
	if err != nil {
		return nil, fmt.Errorf("Error building in cluster k8s config: %v", err)
	}
	return config, nil
}

func buildKubeClient(config *restclient.Config) (*kubernetes.Clientset, error) {
	return kubernetes.NewForConfig(config)
}
func buildGCPClient() (*iam.Service, error) {
	ctx := context.Background()
	c, err :=  iam.NewService(ctx)
	if err != nil {
		return nil, fmt.Errorf("error creating iam api client: %v", err)
	}
	return c, nil
}
func buildCrdClient(kubeconfig *restclient.Config) (*restclient.RESTClient, error){

	if err := v1crd.AddToScheme(scheme.Scheme); err != nil {
		return nil, err
	}
	crdConfig := *kubeconfig
	crdConfig.ContentConfig.GroupVersion = &schema.GroupVersion{Group: v1crd.GroupName, Version: v1crd.GroupVersion}
	crdConfig.APIPath = "/apis"
	crdConfig.NegotiatedSerializer = serializer.NewCodecFactory(scheme.Scheme)
	crdConfig.UserAgent = restclient.DefaultKubernetesUserAgent()

	return restclient.UnversionedRESTClientFor(&crdConfig)

	}
