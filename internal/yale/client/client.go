package client

// Taken from disk manager
// https://github.com/broadinstitute/disk-manager/
import (
	secretmanager "cloud.google.com/go/secretmanager/apiv1"
	"fmt"
	"github.com/broadinstitute/yale/internal/yale/keysync/github"
	githubapi "github.com/google/go-github/v62/github"
	"os"

	monitoring "cloud.google.com/go/monitoring/apiv3/v2"
	v1beta1crd "github.com/broadinstitute/yale/internal/yale/crd/api/v1beta1"
	v1beta1client "github.com/broadinstitute/yale/internal/yale/crd/clientset/v1beta1"
	"github.com/hashicorp/go-azure-sdk/sdk/auth"
	"github.com/hashicorp/go-azure-sdk/sdk/environments"
	vaultapi "github.com/hashicorp/vault/api"
	vaultapprole "github.com/hashicorp/vault/api/auth/approle"
	"github.com/manicminer/hamilton/msgraph"
	"golang.org/x/net/context"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/iam/v1"
	"google.golang.org/api/idtoken"
	"google.golang.org/api/option"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/kubernetes/scheme"
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"
	restclient "k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"
)

const vaultRoleIdEnvVar = "VAULT_ROLE_ID"
const vaultSecretIdEnvVar = "VAULT_SECRET_ID"

const githubAuthTokenEnvVar = "GITHUB_AUTH_TOKEN"

// Clients struct containing the GCP and k8s clients used in this tool
type Clients struct {
	iam           *iam.Service
	metrics       *monitoring.MetricClient
	k8s           kubernetes.Interface
	crd           v1beta1client.YaleCRDInterface
	vault         *vaultapi.Client
	secretmanager *secretmanager.Client
	azure         *msgraph.ApplicationsClient
	github        github.Client
}

func NewClients(
	iam *iam.Service,
	metrics *monitoring.MetricClient,
	k8s kubernetes.Interface,
	crd v1beta1client.YaleCRDInterface,
	vault *vaultapi.Client,
	secretManager *secretmanager.Client,
	azure *msgraph.ApplicationsClient,
	github github.Client,
) *Clients {
	return &Clients{
		iam:           iam,
		metrics:       metrics,
		k8s:           k8s,
		crd:           crd,
		vault:         vault,
		secretmanager: secretManager,
		azure:         azure,
		github:        github,
	}
}

// GetIAM will return a handle to the gcp IAM client generated by the builder
func (c *Clients) GetIAM() *iam.Service {
	return c.iam
}

// GetK8s will return  a handle to the kubernetes client generated by the builder
func (c *Clients) GetK8s() kubernetes.Interface {
	return c.k8s
}

// GetMetrics will return  a handle to the metrics client generated by the builder
func (c *Clients) GetMetrics() *monitoring.MetricClient {
	return c.metrics
}

// GetCRDs will return  a handle to the crd client generated by the builder
func (c *Clients) GetCRDs() v1beta1client.YaleCRDInterface {
	return c.crd
}

// GetVault will return  a handle to the vault client generated by the builder
func (c *Clients) GetVault() *vaultapi.Client {
	return c.vault
}

// GetGoogleSecretManager will return  a handle to the GSM client generated by the builder
func (c *Clients) GetGoogleSecretManager() *secretmanager.Client {
	return c.secretmanager
}

func (c *Clients) GetAzure() *msgraph.ApplicationsClient {
	return c.azure
}

func (c *Clients) GetGitHub() github.Client {
	return c.github
}

// Build creates the GCP and k8s clients used by this tool
// and returns both packaged in a single struct
func Build(local bool, kubeconfig string) (*Clients, error) {
	conf, err := buildKubeConfig(local, kubeconfig)
	if err != nil {
		return nil, fmt.Errorf("error building kube client: %v", err)
	}
	k8s, err := buildKubeClient(conf)
	if err != nil {
		return nil, fmt.Errorf("error building kube client: %v", err)
	}

	_iam, err := buildIAMClient()
	if err != nil {
		return nil, fmt.Errorf("error building GCP IAM client: %v", err)
	}
	metrics, err := buildMetricsClient()
	if err != nil {
		return nil, fmt.Errorf("error building GCP Cloud Monitoring Metric client: %v", err)
	}
	crd, err := buildCrdClient(conf)
	if err != nil {
		return nil, fmt.Errorf("error building CRD client: %v", err)
	}

	vault, err := buildVaultClient()
	if err != nil {
		return nil, fmt.Errorf("error building Vault client: %v", err)
	}

	secretManager, err := buildSecretManagerClient()
	if err != nil {
		return nil, fmt.Errorf("error building GCP secret manager client: %v", err)
	}

	azure, err := buildAzureGraphClient(local)
	if err != nil {
		return nil, fmt.Errorf("error building Azure Graph client: %v", err)
	}

	_github := buildGitHubClient()

	return NewClients(_iam, metrics, k8s, crd, vault, secretManager, azure, _github), nil
}

func buildKubeConfig(local bool, kubeconfig string) (*restclient.Config, error) {
	if local {
		config, err := clientcmd.BuildConfigFromFlags("", kubeconfig)
		if err != nil {
			return nil, fmt.Errorf("error building local k8s config: %v", err)
		}
		return config, nil
	}
	config, err := restclient.InClusterConfig()
	if err != nil {
		return nil, fmt.Errorf("error building in cluster k8s config: %v", err)
	}
	return config, nil
}

func buildKubeClient(config *restclient.Config) (*kubernetes.Clientset, error) {
	return kubernetes.NewForConfig(config)
}

func buildIAMClient() (*iam.Service, error) {
	ctx := context.Background()
	c, err := iam.NewService(ctx)
	if err != nil {
		return nil, fmt.Errorf("error creating iam api client: %v", err)
	}
	return c, nil
}

func buildMetricsClient() (*monitoring.MetricClient, error) {
	ctx := context.Background()
	c, err := monitoring.NewMetricClient(ctx)

	if err != nil {
		return nil, fmt.Errorf("error creating cloud monitoring metrics api client: %v", err)
	}
	return c, nil
}

func buildCrdClient(kubeconfig *restclient.Config) (*v1beta1client.YaleCRDClient, error) {
	if err := v1beta1crd.AddToScheme(scheme.Scheme); err != nil {
		return nil, err
	}

	return v1beta1client.NewForConfig(kubeconfig)
}

func buildVaultClient() (*vaultapi.Client, error) {
	client, err := vaultapi.NewClient(nil)
	if err != nil {
		return nil, fmt.Errorf("error constructing Vault client: %v", err)
	}

	roleID := os.Getenv(vaultRoleIdEnvVar)
	secretID := os.Getenv(vaultSecretIdEnvVar)

	if roleID != "" {
		if secretID == "" {
			return nil, fmt.Errorf("%s specified but no %s", vaultRoleIdEnvVar, vaultSecretIdEnvVar)
		}

		var _auth *vaultapprole.AppRoleAuth
		_auth, err = vaultapprole.NewAppRoleAuth(roleID, &vaultapprole.SecretID{FromString: secretID})
		if err != nil {
			return nil, fmt.Errorf("error authenticating Vault client: %v", err)
		}

		_, err = client.Auth().Login(context.Background(), _auth)
		if err != nil {
			return nil, fmt.Errorf("error authenticating Vault client: %v", err)
		}
	}

	return client, nil
}

func buildSecretManagerClient() (*secretmanager.Client, error) {
	ctx := context.Background()
	client, err := secretmanager.NewClient(ctx)

	if err != nil {
		return nil, fmt.Errorf("error creating secret manager client: %v", err)
	}
	return client, nil
}

func buildGitHubClient() github.Client {
	gitubapiClient := githubapi.NewClient(nil).WithAuthToken(os.Getenv(githubAuthTokenEnvVar))
	return github.NewClient(gitubapiClient)
}

const azureFederatedCredentialAudience = "api://AzureADTokenExchange"

func buildAzureGraphClient(local bool) (*msgraph.ApplicationsClient, error) {
	environment := environments.AzurePublic()

	credentials := auth.Credentials{
		Environment: *environment,
	}

	if local {
		credentials.EnableAuthenticatingUsingAzureCLI = true
	} else {
		tenantID, clientID, err := getYaleAppRegistrationTenantAndClientIDs()
		if err != nil {
			return nil, fmt.Errorf("error getting Yale app registration tenant and client IDs: %v", err)
		}
		token, err := getGoogleIdentityTokenFromMetadataServer(context.Background(), azureFederatedCredentialAudience)
		if err != nil {
			return nil, fmt.Errorf("error getting Google identity token from metadata server for federated azure auth: %v", err)
		}
		credentials.TenantID = tenantID
		credentials.ClientID = clientID
		credentials.OIDCAssertionToken = token
		credentials.EnableAuthenticationUsingOIDC = true
	}

	authorizer, err := auth.NewAuthorizerFromCredentials(context.TODO(), credentials, environment.MicrosoftGraph)
	if err != nil {
		return nil, err
	}

	client := msgraph.NewApplicationsClient()
	client.BaseClient.Authorizer = authorizer
	return client, nil
}

const (
	yaleClientIDEnvVar string = "YALE_APP_REGISTRATION_CLIENT_ID"
	yaleTenantIDEnvVar string = "YALE_APP_REGISTRATION_TENANT_ID"
)

func getYaleAppRegistrationTenantAndClientIDs() (tenantID, clientID string, err error) {
	tenantID, ok := os.LookupEnv(yaleTenantIDEnvVar)
	if !ok {
		return "", "", fmt.Errorf("%s not set", yaleTenantIDEnvVar)
	}

	clientID, ok = os.LookupEnv(yaleClientIDEnvVar)
	if !ok {
		return "", "", fmt.Errorf("%s not set", yaleClientIDEnvVar)
	}

	return
}

func getGoogleIdentityTokenFromMetadataServer(ctx context.Context, targetAudience string) (string, error) {
	credentials, err := google.FindDefaultCredentials(ctx)
	if err != nil {
		return "", fmt.Errorf("error getting default credentials: %v", err)
	}
	tokenSource, err := idtoken.NewTokenSource(ctx, targetAudience, option.WithCredentials(credentials))
	if err != nil {
		return "", fmt.Errorf("error creating token source: %v", err)
	}

	token, err := tokenSource.Token()
	if err != nil {
		return "", fmt.Errorf("error getting token: %v", err)
	}

	return token.AccessToken, nil
}
