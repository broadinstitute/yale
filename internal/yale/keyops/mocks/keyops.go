// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	keyops "github.com/broadinstitute/yale/internal/yale/keyops"
	mock "github.com/stretchr/testify/mock"
)

// KeyOps is an autogenerated mock type for the KeyOps type
type KeyOps struct {
	mock.Mock
}

type KeyOps_Expecter struct {
	mock *mock.Mock
}

func (_m *KeyOps) EXPECT() *KeyOps_Expecter {
	return &KeyOps_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: project, serviceAccountEmail
func (_m *KeyOps) Create(project string, serviceAccountEmail string) (keyops.Key, []byte, error) {
	ret := _m.Called(project, serviceAccountEmail)

	var r0 keyops.Key
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (keyops.Key, []byte, error)); ok {
		return rf(project, serviceAccountEmail)
	}
	if rf, ok := ret.Get(0).(func(string, string) keyops.Key); ok {
		r0 = rf(project, serviceAccountEmail)
	} else {
		r0 = ret.Get(0).(keyops.Key)
	}

	if rf, ok := ret.Get(1).(func(string, string) []byte); ok {
		r1 = rf(project, serviceAccountEmail)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(project, serviceAccountEmail)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// KeyOps_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type KeyOps_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - project string
//   - serviceAccountEmail string
func (_e *KeyOps_Expecter) Create(project interface{}, serviceAccountEmail interface{}) *KeyOps_Create_Call {
	return &KeyOps_Create_Call{Call: _e.mock.On("Create", project, serviceAccountEmail)}
}

func (_c *KeyOps_Create_Call) Run(run func(project string, serviceAccountEmail string)) *KeyOps_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *KeyOps_Create_Call) Return(_a0 keyops.Key, _a1 []byte, _a2 error) *KeyOps_Create_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *KeyOps_Create_Call) RunAndReturn(run func(string, string) (keyops.Key, []byte, error)) *KeyOps_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteIfDisabled provides a mock function with given fields: key
func (_m *KeyOps) DeleteIfDisabled(key keyops.Key) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(keyops.Key) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeyOps_DeleteIfDisabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteIfDisabled'
type KeyOps_DeleteIfDisabled_Call struct {
	*mock.Call
}

// DeleteIfDisabled is a helper method to define mock.On call
//   - key keyops.Key
func (_e *KeyOps_Expecter) DeleteIfDisabled(key interface{}) *KeyOps_DeleteIfDisabled_Call {
	return &KeyOps_DeleteIfDisabled_Call{Call: _e.mock.On("DeleteIfDisabled", key)}
}

func (_c *KeyOps_DeleteIfDisabled_Call) Run(run func(key keyops.Key)) *KeyOps_DeleteIfDisabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(keyops.Key))
	})
	return _c
}

func (_c *KeyOps_DeleteIfDisabled_Call) Return(_a0 error) *KeyOps_DeleteIfDisabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyOps_DeleteIfDisabled_Call) RunAndReturn(run func(keyops.Key) error) *KeyOps_DeleteIfDisabled_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureDisabled provides a mock function with given fields: key
func (_m *KeyOps) EnsureDisabled(key keyops.Key) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(keyops.Key) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeyOps_EnsureDisabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureDisabled'
type KeyOps_EnsureDisabled_Call struct {
	*mock.Call
}

// EnsureDisabled is a helper method to define mock.On call
//   - key keyops.Key
func (_e *KeyOps_Expecter) EnsureDisabled(key interface{}) *KeyOps_EnsureDisabled_Call {
	return &KeyOps_EnsureDisabled_Call{Call: _e.mock.On("EnsureDisabled", key)}
}

func (_c *KeyOps_EnsureDisabled_Call) Run(run func(key keyops.Key)) *KeyOps_EnsureDisabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(keyops.Key))
	})
	return _c
}

func (_c *KeyOps_EnsureDisabled_Call) Return(_a0 error) *KeyOps_EnsureDisabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeyOps_EnsureDisabled_Call) RunAndReturn(run func(keyops.Key) error) *KeyOps_EnsureDisabled_Call {
	_c.Call.Return(run)
	return _c
}

// IsDisabled provides a mock function with given fields: key
func (_m *KeyOps) IsDisabled(key keyops.Key) (bool, error) {
	ret := _m.Called(key)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(keyops.Key) (bool, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(keyops.Key) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(keyops.Key) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyOps_IsDisabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDisabled'
type KeyOps_IsDisabled_Call struct {
	*mock.Call
}

// IsDisabled is a helper method to define mock.On call
//   - key keyops.Key
func (_e *KeyOps_Expecter) IsDisabled(key interface{}) *KeyOps_IsDisabled_Call {
	return &KeyOps_IsDisabled_Call{Call: _e.mock.On("IsDisabled", key)}
}

func (_c *KeyOps_IsDisabled_Call) Run(run func(key keyops.Key)) *KeyOps_IsDisabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(keyops.Key))
	})
	return _c
}

func (_c *KeyOps_IsDisabled_Call) Return(_a0 bool, _a1 error) *KeyOps_IsDisabled_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeyOps_IsDisabled_Call) RunAndReturn(run func(keyops.Key) (bool, error)) *KeyOps_IsDisabled_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewKeyOps interface {
	mock.TestingT
	Cleanup(func())
}

// NewKeyOps creates a new instance of KeyOps. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKeyOps(t mockConstructorTestingTNewKeyOps) *KeyOps {
	mock := &KeyOps{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
