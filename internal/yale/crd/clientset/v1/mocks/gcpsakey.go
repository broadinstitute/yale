// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	apiv1 "github.com/broadinstitute/yale/internal/yale/crd/api/v1"

	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// GcpSaKeyInterface is an autogenerated mock type for the GcpSaKeyInterface type
type GcpSaKeyInterface struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, name, options
func (_m *GcpSaKeyInterface) Get(ctx context.Context, name string, options v1.GetOptions) (*apiv1.GCPSaKey, error) {
	ret := _m.Called(ctx, name, options)

	var r0 *apiv1.GCPSaKey
	if rf, ok := ret.Get(0).(func(context.Context, string, v1.GetOptions) *apiv1.GCPSaKey); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiv1.GCPSaKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, v1.GetOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, opts
func (_m *GcpSaKeyInterface) List(ctx context.Context, opts v1.ListOptions) (*apiv1.GCPSaKeyList, error) {
	ret := _m.Called(ctx, opts)

	var r0 *apiv1.GCPSaKeyList
	if rf, ok := ret.Get(0).(func(context.Context, v1.ListOptions) *apiv1.GCPSaKeyList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiv1.GCPSaKeyList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, v1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
