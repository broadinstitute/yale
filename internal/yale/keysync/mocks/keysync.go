// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	cache "github.com/broadinstitute/yale/internal/yale/cache"
	keysync "github.com/broadinstitute/yale/internal/yale/keysync"

	mock "github.com/stretchr/testify/mock"
)

// KeySync is an autogenerated mock type for the KeySync type
type KeySync struct {
	mock.Mock
}

type KeySync_Expecter struct {
	mock *mock.Mock
}

func (_m *KeySync) EXPECT() *KeySync_Expecter {
	return &KeySync_Expecter{mock: &_m.Mock}
}

// SyncIfNeeded provides a mock function with given fields: entry, gsks
func (_m *KeySync) SyncIfNeeded(entry *cache.Entry, gsks ...keysync.Syncable) error {
	_va := make([]interface{}, len(gsks))
	for _i := range gsks {
		_va[_i] = gsks[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, entry)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cache.Entry, ...keysync.Syncable) error); ok {
		r0 = rf(entry, gsks...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeySync_SyncIfNeeded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncIfNeeded'
type KeySync_SyncIfNeeded_Call struct {
	*mock.Call
}

// SyncIfNeeded is a helper method to define mock.On call
//   - entry *cache.Entry
//   - gsks ...keysync.Syncable
func (_e *KeySync_Expecter) SyncIfNeeded(entry interface{}, gsks ...interface{}) *KeySync_SyncIfNeeded_Call {
	return &KeySync_SyncIfNeeded_Call{Call: _e.mock.On("SyncIfNeeded",
		append([]interface{}{entry}, gsks...)...)}
}

func (_c *KeySync_SyncIfNeeded_Call) Run(run func(entry *cache.Entry, gsks ...keysync.Syncable)) *KeySync_SyncIfNeeded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]keysync.Syncable, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(keysync.Syncable)
			}
		}
		run(args[0].(*cache.Entry), variadicArgs...)
	})
	return _c
}

func (_c *KeySync_SyncIfNeeded_Call) Return(_a0 error) *KeySync_SyncIfNeeded_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeySync_SyncIfNeeded_Call) RunAndReturn(run func(*cache.Entry, ...keysync.Syncable) error) *KeySync_SyncIfNeeded_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewKeySync interface {
	mock.TestingT
	Cleanup(func())
}

// NewKeySync creates a new instance of KeySync. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKeySync(t mockConstructorTestingTNewKeySync) *KeySync {
	mock := &KeySync{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
